services:

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181
    networks:
      - etl_network
    
  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - etl_network

  # Kafka connect sink
  connect:
    image: confluentinc/cp-kafka-connect:latest
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/plugins
      CLICKHOUSE_PASSWORD: ${CH_ADMIN_PWD}
      CLICKHOUSE_USER: ${CH_ADMIN_USER}
    volumes:
      - ./connector/plugins:/etc/kafka-connect/plugins
      - ./connector/config:/etc/kafka-connect/config
    depends_on:
      - kafka
      - zookeeper
    networks:
      - etl_network

  # Kafka ClickHouse connector setup  
  connector-setup:
    build:
      context: ./connector/setup/
      dockerfile: Dockerfile
    network_mode: "host"

  # Airflow worker
  airflow-worker:
    image: bitnami/airflow:latest
    environment:
      - AIRFLOW_COMPONENT_TYPE=worker
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=${AF_DB_USER}
      - AIRFLOW_DATABASE_PASSWORD=${AF_DB_PWD}
    networks:
      - etl_network

  # Airflow scheduler
  airflow-scheduler:
    image: bitnami/airflow:latest
    environment:
      - AIRFLOW_COMPONENT_TYPE=scheduler
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=${AF_DB_USER}
      - AIRFLOW_DATABASE_PASSWORD=${AF_DB_PWD}
    networks:
      - etl_network

  # Airflow webserver
  airflow:
    image: bitnami/airflow:latest
    environment:
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=${AF_DB_USER}
      - AIRFLOW_DATABASE_PASSWORD=${AF_DB_PWD}
      - AIRFLOW_PASSWORD=${AF_USER}
      - AIRFLOW_USERNAME=${AF_PWD}
    networks:
      - etl_network

  # ClickHouse OLAP DB
  clickhouse:
    image: docker.io/bitnami/clickhouse:24
    environment:
      - CLICKHOUSE_ADMIN_USER=${CH_ADMIN_USER}
      - CLICKHOUSE_ADMIN_PASSWORD=${CH_ADMIN_PWD}
    ports:
      - '8123:8123'
    volumes:
      - clickhouse_data:/bitnami/clickhouse
      - ./clickhouse/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - etl_network

volumes:
  clickhouse_data:
    driver: local

networks:
  etl_network:
    driver: bridge
